#include "LF_Power.h"
#include "DSP280x_Device.h"     // Headerfile Include File
#include "DSP280x_Examples.h"   // Examples Include File
#include <math.h>

#define CL_NUMBER	1377

#if FLASH_LOAD == 1
#pragma CODE_SECTION (Main_Loop, "ramfuncs");
#pragma CODE_SECTION (Isr_Scib_RxFifo, "ramfuncs");
#pragma CODE_SECTION (Isr_Adc, "ramfuncs");
#pragma CODE_SECTION (Isr_CpuTimer0, "ramfuncs");

extern Uint16 RamfuncsLoadStart;
extern Uint16 RamfuncsLoadEnd;
extern Uint16 RamfuncsRunStart;
#endif

/* RS232 communication. */
#define SCI_BUF_SIZE			64
#define MAX_RX_PWM_WIDTH		1000 	// Unit:0.1%
#define MAX_RX_PWM_WIDTH_LIMIT	900		// Unit:0.1%
#define MIN_RX_PWM_FREQ			100		// Unit:0.1kHz
#define MAX_RX_PWM_FREQ			1000	// Unit:0.1kHz

Uint16 gRxBuf[SCI_BUF_SIZE];
int16 gnRxBufPos = 0;

Uint16 gRxCmdBuf[SCI_BUF_SIZE];
Uint16 gisRxCmd = FALSE;
int16 gnRxCmdSize = 0;

int32 gnRX_PwmWidth = 0;
int32 gnRX_PwmFreq = 500;

/* PWM. */
#define PWM_WIDTH_LIMIT			0.9

int32 gnPwm_TBPRD = 999;
int32 gnPwm_Width = 0;
int32 gnPwm_WidthAdjust = 0;

/* ADC. */
#define MAX_ADC_CURRENT_LIMIT	2457	// 1A (0A = 2.5V, 1A = 2.5V + 2.5V / 5 = 2048 + 2048 / 5)

//int16 gnAdc_SetVal = 0;
//int16 gnAdc_FBVal = 0;
//int16 gnAdc_Gap = 0;

/* Interlock. */
int16 gnInterlock_OverCurrent = 0;


interrupt void Isr_Scib_RxFifo (void)
{
	Uint16 i;
	Uint16 num_byte;
	Uint16 rx_data = 0;

	// 수신된 데이터의 바이트 수 확인
	num_byte = ScibRegs.SCIFFRX.bit.RXFFST;

	// FIFO에 수신된 데이터를 메모리에 저장
	for(i = 0; i < num_byte; i++)
	{
		rx_data = ScibRegs.SCIRXBUF.bit.RXDT;

		if (rx_data == (Uint16)'{')
		{
			gRxBuf[0] = rx_data;
			gnRxBufPos = 1;
		}
		else
		{
			gRxBuf[gnRxBufPos++] = rx_data;
			if (gnRxBufPos >= SCI_BUF_SIZE)
			{
				gnRxBufPos = SCI_BUF_SIZE - 1;
			}
		}

		if (gRxBuf[0] == (Uint16)'{' && rx_data == (Uint16)'}')
		{
			memcpy (gRxCmdBuf, gRxBuf, gnRxBufPos);
			gisRxCmd = TRUE;
			gnRxCmdSize = gnRxBufPos;
			gnRxBufPos = 0;
		}
	}

	ScibRegs.SCIFFRX.bit.RXFFOVRCLR = 1;			// Clear Overflow flag
	ScibRegs.SCIFFRX.bit.RXFFINTCLR = 1;			// Clear Interrupt flag
	PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;			// Acknowledge interrupt to PIE
}


interrupt void Isr_Adc(void)
{
	/*
	int32 Tmp1, Tmp2;

	switch(State)
	{
		case RECORD_READY:
			if(!GpioDataRegs.GPADAT.bit.GPIO22) State = RECORD_START;
			if(!GpioDataRegs.GPADAT.bit.GPIO23) State = RECORD_PLAY;
			ADCRcnt=0;
		break;

		case RECORD_START:
			Voice[ADCRcnt] = AdcRegs.ADCRESULT0>>8;
			ADCRcnt++;
			if(ADCRcnt==64){
				REC_Trgr = 1;
				ADCRcnt=0;
			}
		break;

		case RECORD_PLAY:
			Tmp2 = (int32)((ReadEeprom(EAddr)&0x00FF)<<7);
			Tmp1 = (int32)(EPwm1Regs.TBPRD + 1) * Tmp2;					// 듀티 설정값을 레지스터에 입력하기 위한 값으로 변환
			EPwm1Regs.CMPA.half.CMPA = (Uint16)(Tmp1>>15);				// 듀티 설정값 설정
			EPwm2Regs.CMPA.half.CMPA = (Uint16)(Tmp1>>15);				// 듀티 설정값 설정
			EAddr++;
			if(EAddr==31999){
				EAddr = 0;
				State = RECORD_READY;
			}
		break;

	}
	*/

	// Reinitialize for next ADC sequence
	AdcRegs.ADCTRL2.bit.RST_SEQ1 = 1;         // Reset SEQ1
	AdcRegs.ADCST.bit.INT_SEQ1_CLR = 1;       // Clear INT SEQ1 bit
	PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;   // Acknowledge interrupt to PIE
}


interrupt void Isr_CpuTimer0 (void)
{
	CpuTimer0.InterruptCount++;

	// Acknowledge this interrupt to receive more interrupts from group 1
	PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}


void Init_ScibGpio()
{
   EALLOW;
	
   /* Enable internal pull-up for the selected pins */
   // Pull-ups can be enabled or disabled disabled by the user.
   // This will enable the pullups for the specified pins.
   // Comment out other unwanted lines.

   GpioCtrlRegs.GPAPUD.bit.GPIO9 = 0;     // Enable pull-up for GPIO9  (SCITXDB)
   //GpioCtrlRegs.GPAPUD.bit.GPIO14 = 0;    // Enable pull-up for GPIO14 (SCITXDB)
   //GpioCtrlRegs.GPAPUD.bit.GPIO18 = 0;	   // Enable pull-up for GPIO18 (SCITXDB)
   //GpioCtrlRegs.GPAPUD.bit.GPIO22 = 0;    // Enable pull-up for GPIO22 (SCITXDB)

	
   GpioCtrlRegs.GPAPUD.bit.GPIO11 = 0;    // Enable pull-up for GPIO11 (SCIRXDB)
   //GpioCtrlRegs.GPAPUD.bit.GPIO15 = 0;    // Enable pull-up for GPIO15 (SCIRXDB)
   //GpioCtrlRegs.GPAPUD.bit.GPIO19 = 0;	   // Enable pull-up for GPIO19 (SCIRXDB)
   //GpioCtrlRegs.GPAPUD.bit.GPIO23 = 0;    // Enable pull-up for GPIO23 (SCIRXDB)

   /* Set qualification for selected pins to asynch only */
   // This will select asynch (no qualification) for the selected pins.
   // Comment out other unwanted lines.

   GpioCtrlRegs.GPAQSEL1.bit.GPIO11 = 3;  // Asynch input GPIO11 (SCIRXDB)
   //GpioCtrlRegs.GPAQSEL1.bit.GPIO15 = 3;  // Asynch input GPIO15 (SCIRXDB)
   //GpioCtrlRegs.GPAQSEL2.bit.GPIO19 = 3;  // Asynch input GPIO19 (SCIRXDB)
   //GpioCtrlRegs.GPAQSEL2.bit.GPIO23 = 3;  // Asynch input GPIO23 (SCIRXDB)

   /* Configure SCI-B pins using GPIO regs*/
   // This specifies which of the possible GPIO pins will be SCI functional pins.
   // Comment out other unwanted lines.

   GpioCtrlRegs.GPAMUX1.bit.GPIO9 = 2;    // Configure GPIO9 for SCITXDB operation
   //GpioCtrlRegs.GPAMUX1.bit.GPIO14 = 2;   // Configure GPIO14 for SCITXDB operation
   //GpioCtrlRegs.GPAMUX2.bit.GPIO18 = 2;   // Configure GPIO18 for SCITXDB operation
   //GpioCtrlRegs.GPAMUX2.bit.GPIO22 = 3;   // Configure GPIO22 for SCITXDB operation
	
   GpioCtrlRegs.GPAMUX1.bit.GPIO11 = 2;   // Configure GPIO11 for SCIRXDB operation
   //GpioCtrlRegs.GPAMUX1.bit.GPIO15 = 2;   // Configure GPIO15 for SCIRXDB operation
   //GpioCtrlRegs.GPAMUX2.bit.GPIO19 = 2;   // Configure GPIO19 for SCIRXDB operation
   //GpioCtrlRegs.GPAMUX2.bit.GPIO23 = 3;   // Configure GPIO23 for SCIRXDB operation
	
    EDIS;
}


Uint16 Scib_Tx(Uint16 *Data, Uint16 num_byte)
{
	Uint16 i;

	for(i = 0 ; i < num_byte; i++)
	{
		while (ScibRegs.SCIFFTX.bit.TXFFST > 8);

		ScibRegs.SCITXBUF = *(Data + i) & 0x00FF;
	}

	return 1;
}


Uint16 Scib_Tx_Byte(char *Data, Uint16 num_byte)
{
	Uint16 i;

	for(i = 0 ; i < num_byte; i++)
	{
		while (ScibRegs.SCIFFTX.bit.TXFFST > 8);

		ScibRegs.SCITXBUF = (Uint16)Data[i] & 0x00FF;
	}

	return 1;
}


Uint32 Code64_To_Int (Uint16 *data, Uint16 start, Uint16 len)
{
	Uint32 ret = 0;
	Uint32 mul = 0;
	Uint16 idx = 0;
	Uint16 i = 0;
	
	if (len <= 0 || len > 4) return 0;

	for (i = 0; i < len; i++)
	{
		mul = (Uint32) pow (64.0, (double)i);
		idx = start + len - i - 1;
		ret += (data[idx] - (Uint16)'0') * mul;
	}

	return ret;
}

Uint32 Code10_To_Int (Uint16 *data, Uint16 start, Uint16 len)
{
	Uint32 ret = 0;
	Uint32 mul = 0;
	Uint16 idx = 0;
	Uint16 i = 0;

	if (len <= 0 || len > 4) return 0;

	for (i = 0; i < len; i++)
	{
		mul = (Uint32) pow (10.0, (double)i);
		idx = start + len - i - 1;
		ret += (data[idx] - (Uint16)'0') * mul;
	}

	return ret;
}

void Int_To_Code64 (Uint16 *data, Uint16 start, Uint16 len, Uint32 val)
{
	Uint16 code64[4] = {0, };
	Uint16 i = 0;

	if (len <= 0 || len > 4) return;

	code64[0] = val % 64;
	code64[1] = (val / 64) % 64;
	code64[2] = (val / 4096) % 64;
	code64[3] = (val / 262144) % 64;

	for (i = 0; i < len; i++)
	{
		data[start + len - 1 - i] = code64[i];
	}
}


void Int_To_Code10 (char *data, Uint16 start, Uint16 len, Uint32 val)
{
	Uint16 code10[4] = {0, };
	Uint16 i = 0;

	if (len <= 0 || len > 4) return;

	code10[0] = val % 10;
	code10[1] = (val / 10) % 10;
	code10[2] = (val / 100) % 10;
	code10[3] = (val / 1000) % 10;

	for (i = 0; i < len; i++)
	{
		data[start + len - 1 - i] = '0' + (char)code10[i];
	}
}


void Init_Scib ()
{
	/*
	InitSciaGpio();

	// SCI 주요설정
	SciaRegs.SCICTL1.bit.SWRESET = 0;		// SCI 소프트웨어 리셋

	SciaRegs.SCICCR.bit.SCICHAR = 7;		// SCI 송수신 Charcter-length 설정 : 8bit
	SciaRegs.SCICCR.bit.LOOPBKENA = 1;		// SCI 루프백 테스트 모드 Enable
	SciaRegs.SCICTL1.bit.RXENA = 1;			// SCI 송신기능 Enable
	SciaRegs.SCICTL1.bit.TXENA = 1;			// SCI 수신기능 Enable
	SciaRegs.SCIHBAUD = 0x00;      			// SCI Baudrate 설정
	SciaRegs.SCILBAUD = 0x50;				//  - [SCIHBAUD,SCILBAUD] => 0x0050 => 38580bps(약38400bps)

	// SCI의 송신 FIFO 설정
	SciaRegs.SCIFFTX.bit.SCIFFENA = 1;		// SCI FIFO 사용 설정 Enable
	SciaRegs.SCIFFTX.bit.TXFFINTCLR = 1;	// SCI 송신 FIFO 인터럽트 플래그 클리어
	SciaRegs.SCIFFTX.bit.TXFIFOXRESET = 1;	// SCI 송신 FIFO RE-enable
	SciaRegs.SCIFFTX.bit.SCIRST = 1;		// SCI 리셋 해제

	// SCI의 수신 FIFO 설정
	SciaRegs.SCIFFRX.bit.RXFFINTCLR = 1;	// SCI 수신 FIFO 인터럽트 플래그 클리어
	SciaRegs.SCIFFRX.bit.RXFFIENA = 1;		// SCI 수신 FIFO 인터럽트 Enable
	SciaRegs.SCIFFRX.bit.RXFIFORESET = 1;	// SCI 수신 FIFO RE-enable
	SciaRegs.SCIFFRX.bit.RXFFIL = 16;		// SCI 수신 FIFO 인터럽트 레벨 설정

	SciaRegs.SCICTL1.bit.SWRESET = 1;		// SCI 소프트웨어 리셋 해제
	*/

	Init_ScibGpio ();

	// SCI 주요설정
	ScibRegs.SCICTL1.bit.SWRESET = 0;		// SCI 소프트웨어 리셋

	ScibRegs.SCICCR.bit.SCICHAR = 7;		// SCI 송수신 Charcter-length 설정 : 8bit
	//ScibRegs.SCICCR.bit.LOOPBKENA = 1;		// SCI 루프백 테스트 모드 Enable
	ScibRegs.SCICTL1.bit.RXENA = 1;			// SCI 송신기능 Enable
	ScibRegs.SCICTL1.bit.TXENA = 1;			// SCI 수신기능 Enable
	ScibRegs.SCIHBAUD = 0x00;      			// SCI Baudrate 설정
	ScibRegs.SCILBAUD = 0x50;				//  - [SCIHBAUD,SCILBAUD] => 0x0050 => 38580bps(약38400bps)

	// SCI의 송신 FIFO 설정
	ScibRegs.SCIFFTX.bit.SCIFFENA = 1;		// SCI FIFO 사용 설정 Enable
	ScibRegs.SCIFFTX.bit.TXFFINTCLR = 1;	// SCI 송신 FIFO 인터럽트 플래그 클리어
	ScibRegs.SCIFFTX.bit.TXFIFOXRESET = 1;	// SCI 송신 FIFO RE-enable
	ScibRegs.SCIFFTX.bit.SCIRST = 1;		// SCI 리셋 해제

	// SCI의 수신 FIFO 설정
	ScibRegs.SCIFFRX.bit.RXFFINTCLR = 1;	// SCI 수신 FIFO 인터럽트 플래그 클리어
	ScibRegs.SCIFFRX.bit.RXFFIENA = 1;		// SCI 수신 FIFO 인터럽트 Enable
	ScibRegs.SCIFFRX.bit.RXFIFORESET = 1;	// SCI 수신 FIFO RE-enable
	ScibRegs.SCIFFRX.bit.RXFFIL = 1;		// SCI 수신 FIFO 인터럽트 레벨 설정

	ScibRegs.SCICTL1.bit.SWRESET = 1;		// SCI 소프트웨어 리셋 해제

	PieCtrlRegs.PIEIER9.bit.INTx3 = 1;		// PIE 인터럽트(SCIRXINTA) : Enable
	IER |= M_INT9;							// CPU 인터럽트(INT9) : Enable
}


void Init_ADC ()
{
	InitAdc();

	/* ADC & PWM interrupt. */
	/*
	// ADC 설정
	AdcRegs.ADCTRL3.bit.ADCCLKPS = 10;				// ADCCLKPS = [HSPCLK / ADCCLKPS *2] (5MHz = 100MHz / 20)
	AdcRegs.ADCTRL1.bit.CPS = 0;					// ADCCLK = ADCCLKPS / 1  (ADC의 구동 클럭을 결정 : ADCCLK = 5MHz)
	AdcRegs.ADCTRL1.bit.ACQ_PS = 2;					// 샘플/홀드 시간 설정 : ACQ_PS + 1 = 3 사이클
	AdcRegs.ADCTRL1.bit.SEQ_CASC = 1;				// 시퀀스 직렬 모드
	AdcRegs.ADCTRL2.bit.EPWM_SOCA_SEQ1 = 1; 		// ePWM_SOCA로 ADC 시퀀스 시동
	AdcRegs.ADCTRL2.bit.INT_ENA_SEQ1 = 1;			// seq 시퀀스 완료시 인터럽트 발생 설정

	//>>[DKHT]
	//AdcRegs.ADCMAXCONV.all = 0;						// 변환 채널수 설정 = MAXCONV + 1
	AdcRegs.ADCMAXCONV.all = 1; 					// 변환 채널수 설정 = MAXCONV + 1

	//seq 변환 순서
	//AdcRegs.ADCCHSELSEQ1.bit.CONV00 = 8;			// 1번째 변환 : ADC_B0
	AdcRegs.ADCCHSELSEQ1.bit.CONV00 = 0;			// 2번째 변환 : ADC_A0
	AdcRegs.ADCCHSELSEQ1.bit.CONV01 = 2;			// 2번째 변환 : ADC_A2
	//<<[]

	//seq 트리거 조건 - PWM3의 주파수(8KHz)
	EPwm3Regs.ETSEL.bit.SOCAEN = 1;     			// SOCA 이벤트 트리거 Enable
	EPwm3Regs.ETSEL.bit.SOCASEL = ET_CTR_PRD;  		// SCCA 트리거 조건 : 카운터 주기 일치 시
	EPwm3Regs.ETPS.bit.SOCAPRD = ET_1ST;			// SOCA 이벤트 분주 설정 : 트리거 조건 한번 마다
	EPwm3Regs.TBCTL.bit.CTRMODE = TB_COUNT_UP;		// count up and start
	EPwm3Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;		// TBCLK = [SYSCLKOUT / (HSPCLKDIV * CLKDIV)]
	EPwm3Regs.TBCTL.bit.CLKDIV = TB_DIV1;			// TBCLK = [100MHz / (1*1)] = 100MHz
   	EPwm3Regs.TBPRD = 12499;						// Set period for ePWM3 (ADC 샘플링 주파수 : 100MHz/12500 = 8kHz)
	EPwm3Regs.TBCTR = 0;							// Clear counter

	// PIE의 ADC 인터럽트 활성화
	PieCtrlRegs.PIEIER1.bit.INTx6 = 1;				// PIE 인터럽트(ADCINT) 활성화
	IER |= M_INT1; 									// CPU 인터럽트(INT1)  활성화
	*/

	/* Continuous ADC. */
	AdcRegs.ADCTRL1.bit.ACQ_PS = 0x0f;
	AdcRegs.ADCTRL3.bit.ADCCLKPS = 1;
	AdcRegs.ADCTRL1.bit.SEQ_CASC = 1;        		// 1  Cascaded mode
	AdcRegs.ADCCHSELSEQ1.bit.CONV00 = 0;			// 1번째 변환 : ADC_A2
	AdcRegs.ADCCHSELSEQ1.bit.CONV01 = 2;			// 2번째 변환 : ADC_A2
	AdcRegs.ADCTRL1.bit.CONT_RUN = 1;       		// Setup continuous run

	AdcRegs.ADCMAXCONV.all = 1; 					// 변환 채널수 설정 = MAXCONV + 1

	AdcRegs.ADCTRL2.all = 0x2000;
}


void Init_CpuTimer ()
{
	InitCpuTimers();
	ConfigCpuTimer(&CpuTimer0, 100, 1000000);
	StartCpuTimer0();

	PieCtrlRegs.PIEIER1.bit.INTx7 = 1;
	IER |= M_INT1;
}


void Init_ePWM ()
{
	// Initialize PWM PIN
	EALLOW;
	GpioCtrlRegs.GPAMUX1.bit.GPIO0 = 1;				// Configure GPIO0 as EPWM1A
	//>>[DKHT]
	GpioCtrlRegs.GPAMUX1.bit.GPIO1 = 1;				// Configure GPIO1 as EPWM1B
	//GpioCtrlRegs.GPAMUX1.bit.GPIO2 = 1;			// Configure GPIO2 as EPWM2A
	//<<[]
	EDIS;

	EALLOW;
	SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 0;
	EDIS;

	// ePWM1 Time-Base Submodule 초기화
	EPwm1Regs.TBCTL.bit.PRDLD = TB_IMMEDIATE;		// set Immediate load
	EPwm1Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;		// TBCLK = [SYSCLKOUT / (HSPCLKDIV * CLKDIV)]
	EPwm1Regs.TBCTL.bit.CLKDIV = TB_DIV1;			// TBCLK = [100MHz / (1*1)] = 100MHz

	//>>[DKHT]
	//EPwm1Regs.TBCTL.bit.CTRMODE = TB_COUNT_UP;	// 카운터 모드 : 비대칭모드 (Asymmetrical mode)
	EPwm1Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;
	//<<[]

	//>>[DKHT]
	//EPwm1Regs.TBPRD = 1249;						// Set period for ePWM1 (PWM 캐리어 주파수 : 100MHz/1250 = 80kHz)
	EPwm1Regs.TBPRD = gnPwm_TBPRD;			  	    // Set period for ePWM1 (PWM 캐리어 주파수 : 100MHz/(1000 * 2) = 50kHz)
	//<<[]

	EPwm1Regs.TBCTR = 0;							// Clear counter

	// ePWM1 Counter-Compare Submodule 초기화
	EPwm1Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;		// 비교 레지스터에 Shadow 레지스터 사용
	EPwm1Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO;	// 카운터가 0 일때 Shadow 레지스터에서 비교 레지스터에 비교 값 로드

	// ePWM1 Action-qualifier 초기화
	EPwm1Regs.AQCTLA.bit.ZRO = AQ_SET;				// 카운터가 제로일 때 High
	EPwm1Regs.AQCTLA.bit.CAU = AQ_CLEAR;			// 카운터가 상승할 때 비교값이 일치하면 Low
	EPwm1Regs.AQCTLB.bit.PRD = AQ_SET;				// 카운터가 제로일 때 High
	EPwm1Regs.AQCTLB.bit.CBD = AQ_CLEAR;			// 카운터가 상승할 때 비교값이 일치하면 Low

	//>>[DKHT]
	/*
	// ePWM2 Time-Base Submodule 초기화
	EPwm2Regs.TBCTL.bit.PRDLD = TB_IMMEDIATE;		// set Immediate load
	EPwm2Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;		// TBCLK = [SYSCLKOUT / (HSPCLKDIV * CLKDIV)]
	EPwm2Regs.TBCTL.bit.CLKDIV = TB_DIV1;			// TBCLK = [100MHz / (1*1)] = 100MHz
	EPwm2Regs.TBCTL.bit.CTRMODE = TB_COUNT_UP;		// 카운터 모드 : 비대칭모드 (Asymmetrical mode)
   	EPwm2Regs.TBPRD = 1249;						    // Set period for ePWM2 (PWM 캐리어 주파수 : 100MHz/1250 = 80kHz)
	EPwm2Regs.TBCTR = 0;							// Clear counter

	// ePWM2 Counter-Compare Submodule 초기화
	EPwm2Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;		// 비교 레지스터에 Shadow 레지스터 사용
	EPwm2Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO;	// 카운터가 0 일때 Shadow 레지스터에서 비교 레지스터에 비교 값 로드

	// ePWM2 Action-qualifier 초기화
	EPwm2Regs.AQCTLA.bit.ZRO = AQ_SET;				// 카운터가 제로일 때 High
	EPwm2Regs.AQCTLA.bit.CAU = AQ_CLEAR;			// 카운터가 상승할 때 비교값이 일치하면 Low
	*/
	//<<[]

	EALLOW;
	SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 1;
	EDIS;
}


void UpdatePWM ()
{
	gnPwm_TBPRD = 100000000 / (gnRX_PwmFreq * 100 * 2);
	gnPwm_Width = gnPwm_TBPRD * gnRX_PwmWidth / MAX_RX_PWM_WIDTH;

	gnPwm_WidthAdjust = 0;
	gnPwm_Width = gnPwm_Width + gnPwm_WidthAdjust;

	if (gnPwm_Width < 0) gnPwm_Width = 0;
	if (gnPwm_Width > gnPwm_TBPRD * PWM_WIDTH_LIMIT) gnPwm_Width = gnPwm_TBPRD * PWM_WIDTH_LIMIT;

	EPwm1Regs.CMPA.half.CMPA = gnPwm_Width;
	EPwm1Regs.CMPB = gnPwm_TBPRD - gnPwm_Width;
	EPwm1Regs.TBPRD = gnPwm_TBPRD;			  	    // Set period for ePWM1 (PWM 캐리어 주파수 : 100MHz/(1000 * 2) = 50kHz)
}


void Main_Loop ()
{
	Uint16 rx_cmd_buf [SCI_BUF_SIZE];
	char tx_cmd_buf [SCI_BUF_SIZE];
	int16 rx_cmd_size = 0;
	int16 rx_val_size = 0;
	int32 rx_pwm_width_latest = 0;

	int32 adc_loop_count = 0;
	int32 adc_ch0_val = 0;
	int32 adc_ch0_sum = 0;
	int32 adc_ch0_average = 0;
	int32 adc_ch2_val = 0;

	int16 num = 0;
	int32 loop_count = 0;

	while (TRUE)
	{
		/* SCI command. */
		if (gisRxCmd)
		{
			gisRxCmd = FALSE;

			rx_cmd_size = gnRxCmdSize;
			rx_val_size = rx_cmd_size - 3;
			memcpy (rx_cmd_buf, gRxCmdBuf, rx_cmd_size);

			/* CL Number. */
			if (rx_cmd_buf[1] == (Uint16)'V')
			{
				if (gnRxCmdSize == 3)
				{
					num = 0;
					tx_cmd_buf[num++] = '{';
					tx_cmd_buf[num++] = 'V';

					Int_To_Code10 (tx_cmd_buf, num, 4, CL_NUMBER);
					num += 4;

					tx_cmd_buf[num++] = '}';
					Scib_Tx_Byte (tx_cmd_buf, 7);
				}
				else
				{
					Scib_Tx_Byte ("{E0}", 4);
				}
			}

			/* Power on. */
			else if (rx_cmd_buf[1] == (Uint16)'P')
			{
				// ON.
				if (rx_cmd_buf[2] == (Uint16)'1')
				{
					Scib_Tx_Byte ("{P}", 3);
					gnRX_PwmWidth = rx_pwm_width_latest;
					UpdatePWM ();
				}

				// OFF.
				else if (rx_cmd_buf[2] == (Uint16)'0')
				{
					Scib_Tx_Byte ("{P}", 3);
					gnRX_PwmWidth = 0;
					UpdatePWM ();
				}
				else
				{
					Scib_Tx_Byte ("{E0}", 4);
				}
			}

			/* PWM Frequency. */
			else if (rx_cmd_buf[1] == (Uint16)'F')
			{
				if (rx_cmd_buf[2] == (Uint16)'?')
				{
					num = 0;
					tx_cmd_buf[num++] = '{';
					tx_cmd_buf[num++] = 'F';

					Int_To_Code10 (tx_cmd_buf, num++, 4, gnRX_PwmFreq);
					num += 4;

					tx_cmd_buf[num++] = '}';
					Scib_Tx_Byte (tx_cmd_buf, num);
				}
				else
				{
					Scib_Tx_Byte ("{F}", 3);
					gnRX_PwmFreq = Code10_To_Int (rx_cmd_buf, 2, rx_val_size);

					if (gnRX_PwmFreq < MIN_RX_PWM_FREQ) gnRX_PwmFreq = MIN_RX_PWM_FREQ;
					if (gnRX_PwmFreq > MAX_RX_PWM_FREQ) gnRX_PwmFreq = MAX_RX_PWM_FREQ;

					UpdatePWM ();
				}
			}

			/* PWM Width. */
			else if (rx_cmd_buf[1] == (Uint16)'W')
			{
				if (rx_cmd_buf[2] == (Uint16)'?')
				{
					num = 0;
					tx_cmd_buf[num++] = '{';
					tx_cmd_buf[num++] = 'W';

					Int_To_Code10 (tx_cmd_buf, num, 4, gnRX_PwmWidth);
					num += 4;

					tx_cmd_buf[num++] = '}';
					Scib_Tx_Byte (tx_cmd_buf, num);
				}
				else
				{
					Scib_Tx_Byte ("{W}", 3);

					gnRX_PwmWidth = Code10_To_Int (rx_cmd_buf, 2, rx_val_size);
					rx_pwm_width_latest = gnRX_PwmWidth;

					if (gnRX_PwmWidth > MAX_RX_PWM_WIDTH_LIMIT) gnRX_PwmWidth = MAX_RX_PWM_WIDTH_LIMIT;

					UpdatePWM ();
				}
			}

			/* Monitoring. */
			else if (rx_cmd_buf[1] == (Uint16)'M')
			{
				if (gnRxCmdSize == 3)
				{
					num = 0;
					tx_cmd_buf[num++] = '{';
					tx_cmd_buf[num++] = 'M';

					if (gnInterlock_OverCurrent > 0)
					{
						tx_cmd_buf[num++] = 'O';
						tx_cmd_buf[num++] = '1';
					}
					else
					{
						tx_cmd_buf[num++] = 'O';
						tx_cmd_buf[num++] = '0';
					}

					tx_cmd_buf[num++] = 'C';
					Int_To_Code10 (tx_cmd_buf, num, 4, adc_ch0_average);
					num += 4;

					tx_cmd_buf[num++] = '}';
					Scib_Tx_Byte (tx_cmd_buf, num);
				}
				else
				{
					Scib_Tx_Byte ("{E0}", 4);
				}
			}

			/* Reset. */
			else if (rx_cmd_buf[1] == (Uint16)'R')
			{
				if (gnRxCmdSize == 3)
				{
					Scib_Tx_Byte ("{R}", 3);
					gnInterlock_OverCurrent = 0;
				}
				else
				{
					Scib_Tx_Byte ("{E0}", 4);
				}
			}

			else
			{
				Scib_Tx_Byte ("{E0}", 4);
			}
		}

		/* ADC. */
		/*
		{
			adc_ch0_val = AdcRegs.ADCRESULT0 >> 4;
			adc_ch2_val = AdcRegs.ADCRESULT1 >> 4;

			// check over current.
			if (adc_ch0_val > MAX_ADC_CURRENT_LIMIT)
			{
				gnInterlock_OverCurrent++;
				gnRX_PwmWidth = 0;
				UpdatePWM ();
			}

			// check average current.
			adc_ch0_sum += adc_ch0_val;
			if (++adc_loop_count > 1000)
			{
				adc_ch0_average = adc_ch0_sum / 1000;
				adc_ch0_sum = 0;
				adc_loop_count = 0;
			}
		}
		*/

		/* PWM. */
		/*
		gnAdc_SetVal = AdcRegs.ADCRESULT0 >> 4;
		gnAdc_FBVal = AdcRegs.ADCRESULT1 >> 4;

		gnAdcGap = gnAdcFBVal - gnAdcSetVal;
		if (gnAdcGap < -200) // < -5%.
		{
			gnPwmWidthAdjust = gnPwmWidthAdjust + 10;
			if (gnPwmWidthAdjust > MAX_gnPwmWidth / 2) gnPwmWidthAdjust = MAX_gnPwmWidth / 2;
		}
		else if (gnAdcGap > 200) // > 5%.
		{
			gnPwmWidthAdjust = gnPwmWidthAdjust - 10;
			if (gnPwmWidthAdjust < -MAX_gnPwmWidth / 2) gnPwmWidthAdjust = -MAX_gnPwmWidth / 2;
		}
		else gnPwmWidthAdjust = 0;
		*/

		/*
		gnPwm_TBPRD = 100000000 / (gnRX_PwmFreq * 100 * 2);
		gnPwm_Width = gnPwm_TBPRD * gnRX_PwmWidth / MAX_RX_PWM_WIDTH;

		gnPwm_WidthAdjust = 0;
		gnPwm_Width = gnPwm_Width + gnPwm_WidthAdjust;

		if (gnPwm_Width < 0) gnPwm_Width = 0;
		if (gnPwm_Width > gnPwm_TBPRD * PWM_WIDTH_LIMIT) gnPwm_Width = gnPwm_TBPRD * PWM_WIDTH_LIMIT;

		EPwm1Regs.CMPA.half.CMPA = gnPwm_Width;
		EPwm1Regs.CMPB = gnPwm_TBPRD - gnPwm_Width;
		EPwm1Regs.TBPRD = gnPwm_TBPRD;			  	    // Set period for ePWM1 (PWM 캐리어 주파수 : 100MHz/(1000 * 2) = 50kHz)
		*/

		loop_count++;
	}
}


void main(void)
{
	//EALLOW;
	//SysCtrlRegs.HISPCP.all = 0x04;	// HSPCLK = SYSCLKOUT/8 = 12.5MHz
	//EDIS;

	//============================================================================================
	// Step 1. Disable Global Interrupt
	//--------------------------------------------------------------------------------------------
	DINT;

	//============================================================================================
	// Step 2. 시스템 컨트롤 초기화:
	//--------------------------------------------------------------------------------------------
	// 초기화 시작
	// PLL, WatchDog, enable Peripheral 클럭의 초기화
	// DSP280x_SysCtrl.c 에 정의된 함수.
	//		2.1 Disables the watchdog
	//		2.2 Set the PLLCR for proper SYSCLKOUT frequency
	//		2.3 Set the pre-scaler for the high and low frequency peripheral clocks
	//		2.4 Enable the clocks to the peripherals
	//--------------------------------------------------------------------------------------------
	InitSysCtrl();

#if FLASH_LOAD == 1
	MemCopy(&RamfuncsLoadStart, &RamfuncsLoadEnd, &RamfuncsRunStart);
	InitFlash ();
#endif

	//============================================================================================
	// Step 3. 인터럽트 초기화:
	//--------------------------------------------------------------------------------------------
	InitPieCtrl();
	IER = 0x0000;
	IFR = 0x0000;
	InitPieVectTable();

	// Vector Re-mapping
	EALLOW;
	PieVectTable.SCIRXINTB = &Isr_Scib_RxFifo;
	PieVectTable.ADCINT = &Isr_Adc;
	PieVectTable.TINT0 = &Isr_CpuTimer0;
	EDIS;

	//============================================================================================
	// Step 4. LED setting
	//--------------------------------------------------------------------------------------------
	EALLOW;
	GpioCtrlRegs.GPAMUX1.all = 0x00000000;  //  0~15 port use to GPIO
	GpioCtrlRegs.GPAMUX2.all = 0x00000000;  // 16~31 port use to GPIO
	GpioCtrlRegs.GPADIR.all = 0x000085CA;   // GPIO 1,3,6,7,8,10,15 outputs
   	GpioDataRegs.GPASET.all = 0x000005CA;	// GPIO 1,3,6,7,8,10 high (LED OFF)
	GpioDataRegs.GPACLEAR.all = 0x00008000;	// GPIO 15 low (U3100-74LVC4245A Enable)
   	EDIS;

	//============================================================================================
	// Step 5. SCI setting
	//--------------------------------------------------------------------------------------------
   	Init_Scib ();
   	Init_ADC ();
   	Init_ePWM ();
   	Init_CpuTimer ();

	//============================================================================================
	// Enable global Interrupts and higher priority real-time debug events:
	//--------------------------------------------------------------------------------------------
	EINT;   // Enable Global interrupt INTM
	ERTM;   // Enable Global realtime interrupt DBGM

	//============================================================================================
	// IDLE loop. Just sit and loop forever :
	//--------------------------------------------------------------------------------------------
	Main_Loop ();
}


